<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云野阁</title>
  
  <subtitle>潇洒是一种态度</subtitle>
  <link href="https://marsperl.github.io/atom.xml" rel="self"/>
  
  <link href="https://marsperl.github.io/"/>
  <updated>2024-03-08T14:39:45.969Z</updated>
  <id>https://marsperl.github.io/</id>
  
  <author>
    <name>masperl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker基础知识</title>
    <link href="https://marsperl.github.io/yyg/7b36b89c/"/>
    <id>https://marsperl.github.io/yyg/7b36b89c/</id>
    <published>2024-03-08T14:13:53.166Z</published>
    <updated>2024-03-08T14:39:45.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker基础知识"><a href="#docker基础知识" class="headerlink" title="docker基础知识"></a>docker基础知识</h1><p><code>docker search 镜像</code> #搜索要下载的镜像</p><p><code>docker pull 镜像</code> #将镜像拉到本地</p><p><code>docker images</code> #查看已拉取到本地的镜像</p><p><code>docker rmi 镜像名或ID</code> #删除镜像</p><p><code>docker rm 容器ID</code> #删除已停止容器</p><blockquote><p><code>docker rm -f 容器ID</code> #强制删除容器</p></blockquote><p>一次性删除多个容器</p><blockquote><p><code>docker rm -f $(docker ps -a -q)</code></p><p><code>docker ps -a -q |xargs docker rm</code></p></blockquote><p>删除虚悬镜像</p><blockquote><p><code>docker image ls -f dangling=true</code> #显示所有的虚悬镜像</p><p><code>docker image prune</code> #删除虚悬镜像</p></blockquote><p><code>docker ps</code> #查看正在运行的容器</p><blockquote><p><code>docker ps -a</code> #列出所有正在运行和曾运行过的容器</p><p><code>docker ps -l</code> #显示最近创建的容器</p><p><code>docker ps -n</code> #显示最近创建的n个容器</p><p><code>docker ps -q</code> #只显示容器编号</p></blockquote><p><code>docker stop  容器名或ID</code> #结束容器运行</p><p><code>docker kill  容器名或ID</code> #强制停止容器运行</p><p><code>docker start 容器名或ID</code> #启动已停止的容器</p><p><code>docker restart 容器名或ID</code> #重启容器</p><p><code>docker run -it 镜像名或ID</code> #启动镜像(-it指交互式启动)</p><blockquote><p><code>docker run -d 容器名或ID</code> #容器后台运行</p><p><code>docker run -it -p 端口号:端口号 容器名或ID</code> #以特定端口号运行容器</p><p><code>docker run -it -P 容器名或ID</code> #随机分配端口号运行容器</p><p>启动镜像后，按下<code>ctrl+p+q</code>，容器后台运行 </p></blockquote><p>重新进入后台运行的容器</p><blockquote><p><code>docker exec -it  容器ID</code> #在容器中打开新的终端，并且可以启动新的进程，用exit退出，不会导致容器的停止。(推荐使用)</p><p><code>docker attach 容器ID</code>  #直接进入容器启动命令的终端，不会启动新的进程，用exit退出，会导致容器的停止。</p></blockquote><p><code>docker inspect 容器ID</code>#显示容器内的详细信息</p><p><code>docker logs  容器ID</code> #查看容器日志</p><p><code>docker top  容器ID</code> 查看容器内进程</p><p><code>docker cp  容器ID:容器内路径 目的主机路径</code> #将文件从容器拷贝到主机</p><p>容器的导入导出</p><blockquote><p><code>docker export  容器ID &gt;文件名.tar</code> #将容器及内容导出为tar包</p><p><code>cat 文件名.tar | docker import -镜像用户/镜像名:镜像版本号</code> #从tar包中创建一个新文件系统再导入镜像</p></blockquote><p><code>docker run -it --privileged=true -v /宿主机目录:/容器内目录 镜像名</code>#宿主机与容器之间映射添加容器卷</p><p><code>docker run -it --privileged=true -v /宿主机目录:/容器内目录:rw 镜像名</code>#宿主机与容器之间映射添加容器卷,容器内文件可读可写</p><p><code>docker run -it --privileged=true -v /宿主机目录:/容器内目录:ro 镜像名</code>#宿主机与容器之间映射添加容器卷,容器内文件只可读</p><p><code>docker run -it --privileged=true -volumes-from 父类 -name 容器2名称 镜像名</code> #容器2继承容器1的卷规则</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230407171910378.png" alt="image-20230407171910378"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker基础知识&quot;&gt;&lt;a href=&quot;#docker基础知识&quot; class=&quot;headerlink&quot; title=&quot;docker基础知识&quot;&gt;&lt;/a&gt;docker基础知识&lt;/h1&gt;&lt;p&gt;&lt;code&gt;docker search 镜像&lt;/code&gt; #搜索要下载的镜</summary>
      
    
    
    
    <category term="docker" scheme="https://marsperl.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://marsperl.github.io/tags/docker/"/>
    
    <category term="docker基础" scheme="https://marsperl.github.io/tags/docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>实现Docker 容器跨主机通讯</title>
    <link href="https://marsperl.github.io/yyg/60ed202a/"/>
    <id>https://marsperl.github.io/yyg/60ed202a/</id>
    <published>2024-03-08T14:13:53.166Z</published>
    <updated>2024-03-08T14:39:45.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现Docker-容器跨主机通讯"><a href="#实现Docker-容器跨主机通讯" class="headerlink" title="实现Docker 容器跨主机通讯"></a>实现Docker 容器跨主机通讯</h2><p>[TOC]</p><h3 id="方案一：docker-swarm集群"><a href="#方案一：docker-swarm集群" class="headerlink" title="方案一：docker swarm集群"></a>方案一：docker swarm集群</h3><p><a href="https://blog.csdn.net/AMCUL/article/details/132913280">https://blog.csdn.net/AMCUL/article/details/132913280</a></p><h3 id="方案二：直接路由法"><a href="#方案二：直接路由法" class="headerlink" title="方案二：直接路由法"></a>方案二：直接路由法</h3><p>在部署指南中提到的方法的实现分固定网段、路由持久化、IP转发三部分组成。</p><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><h5 id="修改并固定docker0的默认网段"><a href="#修改并固定docker0的默认网段" class="headerlink" title="修改并固定docker0的默认网段"></a>修改并固定docker0的默认网段</h5><ol><li>修改docker0网段ip，在主机的&#x2F;etc&#x2F;docker&#x2F;daemon.json文件中，加入如下内容：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开daemon.json文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一中添加的内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">172.16.200.1 为主机一的docker网段ip</span></span><br><span class="line">&#123;</span><br><span class="line"> &quot;bip&quot;: &quot;172.16.200.1/24&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二中添加的内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">172.16.210.1 为主机二的docker网段ip</span></span><br><span class="line">&#123;</span><br><span class="line"> &quot;bip&quot;: &quot;172.16.210.1/24&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启docker服务</span></span><br><span class="line">systemctl restart docker </span><br></pre></td></tr></table></figure><ol><li>添加路由规则，主机间互相添加</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机1上添加路由规则（添加主机2的ip和网段）</span></span><br><span class="line">ip route add 172.16.210.0/24 via 172.20.1.52</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机2上添加路由规则（添加主机1的ip和网段）</span></span><br><span class="line">ip route add 172.16.200.0/24 via 172.20.1.51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式一：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启路由转发</span></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式二：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置iptables规则（本机的网段）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一</span></span><br><span class="line">iptables -t nat -F POSTROUTING</span><br><span class="line">iptables -t nat -A POSTROUTING -s 172.16.200.0/24 ! -d 172.16.0.0/16 -j MASQUERADE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二</span></span><br><span class="line">iptables -t nat -F POSTROUTING</span><br><span class="line">iptables -t nat -A POSTROUTING -s 172.16.210.0/24 ! -d 172.16.0.0/16 -j MASQUERADE</span><br></pre></td></tr></table></figure><ol><li>启动容器并测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机1上启动ubuntu容器</span></span><br><span class="line">docker run -it --name node1 ubuntu:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机2上启动ubuntu容器</span></span><br><span class="line">docker run -it --name node2 ubuntu:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装测试工具</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ping工具</span></span><br><span class="line">apt-get install inetutils-ping -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ip查看工具</span></span><br><span class="line">apt-get install net-tools -y</span><br></pre></td></tr></table></figure><h5 id="路由持久化（防止主机重启路由丢失）"><a href="#路由持久化（防止主机重启路由丢失）" class="headerlink" title="路由持久化（防止主机重启路由丢失）"></a>路由持久化（防止主机重启路由丢失）</h5><h6 id="法一：（推荐）"><a href="#法一：（推荐）" class="headerlink" title="法一：（推荐）"></a>法一：（推荐）</h6><p>在<code>/etc/sysconfig/network-scripts/</code>目录下创建名为<code>route-enp0s3</code>(enp0s3为主机网卡的名字，以实际为准)的文件 </p><p>推荐此方法，注意创建时<code>route-</code>后跟的是本机主机的网卡名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/route-enp0s3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在此文件添加如下格式的内容</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一中添加</span></span><br><span class="line">172.16.230.0/24 via 172.20.1.52</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二中添加</span></span><br><span class="line">172.16.220.0/24 via 172.20.1.51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启网络验证</span></span><br><span class="line">service network restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看路由表中是否有刚才添加的路由</span></span><br><span class="line">ip route show | column -t</span><br></pre></td></tr></table></figure><h6 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h6><p>在<code>/etc/sysconfig/static-routes</code> 文件里添加如下内容 (没有static-routes需手动建立)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一中添加</span></span><br><span class="line">any net 172.16.230.0/24 via 172.20.1.52</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二中添加</span></span><br><span class="line">any net 172.16.220.0/24 via 172.20.1.51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启网络服务</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看路由表中是否有刚才添加的路由</span></span><br><span class="line">ip route show | column -t</span><br></pre></td></tr></table></figure><h5 id="开启IP转发"><a href="#开启IP转发" class="headerlink" title="开启IP转发"></a>开启IP转发</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久开启</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><h4 id="方法2：（适用于使用固定ip的容器）"><a href="#方法2：（适用于使用固定ip的容器）" class="headerlink" title="方法2：（适用于使用固定ip的容器）"></a>方法2：（适用于使用固定ip的容器）</h4><h5 id="创建docker网络"><a href="#创建docker网络" class="headerlink" title="创建docker网络"></a>创建docker网络</h5><ol><li>docker桥接类型网络创建</li></ol><p>分别对两台服务器中的docker创建名字为test的网络，指定子网范围为 172.16.220.0&#x2F;24 、172.16.230.0&#x2F;24</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一</span></span><br><span class="line">docker network create test --driver bridge --ipam-driver default --subnet 172.16.220.0/24</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二</span></span><br><span class="line">docker network create test --driver bridge --ipam-driver default --subnet 172.16.230.0/24</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看网络</span></span><br><span class="line">docker network ls</span><br></pre></td></tr></table></figure><ol><li>设置静态路由</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机1上添加路由规则（添加主机2的ip和网段）</span></span><br><span class="line">ip route add 172.16.230.0/24 via 172.20.1.52</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机2上添加路由规则（添加主机1的ip和网段）</span></span><br><span class="line">ip route add 172.16.220.0/24 via 172.20.1.51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启路由转发</span></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br></pre></td></tr></table></figure><ol><li>启动容器并测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机1上启动ubuntu容器(加上创建的桥接网络)</span></span><br><span class="line">docker run -it --name node1 --net=test ubuntu:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机2上启动ubuntu容器(加上创建的桥接网络)</span></span><br><span class="line">docker run -it --name node2 --net=test ubuntu:latest /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装测试工具</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ping工具</span></span><br><span class="line">apt-get install inetutils-ping -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ip查看工具</span></span><br><span class="line">apt-get install net-tools -y</span><br></pre></td></tr></table></figure><h5 id="路由持久化（防止主机重启路由丢失）-1"><a href="#路由持久化（防止主机重启路由丢失）-1" class="headerlink" title="路由持久化（防止主机重启路由丢失）"></a>路由持久化（防止主机重启路由丢失）</h5><p>使用<strong>nmtui图形化界面添加</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载nmtui</span></span><br><span class="line">yum install net-tools -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">显示nmtui图形化界面</span></span><br><span class="line">nmtui</span><br></pre></td></tr></table></figure><p>在主机一网卡中配置主机二的docker网络的ip段和ip，在主机二网卡中配置主机一的docker网络的ip段和ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一中添加</span></span><br><span class="line">172.16.230.0/24  172.20.1.52</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二中添加</span></span><br><span class="line">172.16.220.0/24  172.20.1.51</span><br></pre></td></tr></table></figure><p>配置完成会在&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts文件夹下看到</p><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=YmI3YjUxODk0OGNiMjU1ZjI4YjQ3ZTAzNDdjYjlmNzNfMFY0S2dQck8xUW5vb3BCeWZkMFNPTXFiS2dqMmE2NjJfVG9rZW46Vjk5aGIzZTU3b0RtUmJ4R21pY2NSVlRlbk9kXzE2OTQ3OTQyNjg6MTY5NDc5Nzg2OF9WNA" alt="img"></p><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjI3NDk3Y2M4NWQ4YzMxODhmZTljM2U3MDM0MzQxZGJfQk01NlNPSnVCUENZU0xDamphbVdlR2k0ZG5XTzkwQ0xfVG9rZW46UGN0aWJlMU9Qb2tYSlZ4dGhIZGNhYmpwbnRiXzE2OTQ3OTQyNjg6MTY5NDc5Nzg2OF9WNA" alt="img"></p><p>启动对应主机的新创建的网卡（网络重启或系统重启后会失效）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一</span></span><br><span class="line">nmcli c up br-aed92de88760</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二</span></span><br><span class="line">nmcli c up br-0ab3914edle2</span><br></pre></td></tr></table></figure><p>要使新网卡保持启动则需将对应新创建的网卡文件中的<code>ONBOOT=no</code>改为<code>ONBOOT=yes</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一</span></span><br><span class="line">vi ifcfg-br-aed92de88760</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ONBOOT=no改为ONBOOT=<span class="built_in">yes</span></span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二</span></span><br><span class="line">vi ifcfg-br-0ab3914edle2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ONBOOT=no改为ONBOOT=<span class="built_in">yes</span></span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启网络服务</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=M2Y4OGJlNjgxOWU5YmE0NzJhMzcwMGVkMzQ3ZDQ5OWJfQjNRVXprRkx1bjQ2eVN4c2t0UWptd2lXY3Q4OURPREhfVG9rZW46QmNvUWI3Z1Ntb2s2VGV4MkI0RmMxZU55bmpjXzE2OTQ3OTQyNjg6MTY5NDc5Nzg2OF9WNA" alt="img"></p><h5 id="开启IP转发-1"><a href="#开启IP转发-1" class="headerlink" title="开启IP转发"></a>开启IP转发</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久开启</span></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>此时容器不受网络重启影响，可实现跨主机通讯。</p><p>但系统重启后，所创建的docker网络和容器均失效。</p><p>需要重新创建docker网络和容器，此后docker网络和容器均不受系统重启和网络重启的影响，成功实现docker容器的跨主机通讯。</p><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=YWQyMmQ3ZDY4YjU5M2NmZDE5MTg2MjRhZWExNzM2NGNfdjRueUt2THN1MDAzOElqcllsdWlCVnBIREVwMnRIbElfVG9rZW46SDkzTWJ3YmFXb1lETnd4M0pOZ2N2ejZWbjNiXzE2OTQ3OTQyNjg6MTY5NDc5Nzg2OF9WNA" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现Docker-容器跨主机通讯&quot;&gt;&lt;a href=&quot;#实现Docker-容器跨主机通讯&quot; class=&quot;headerlink&quot; title=&quot;实现Docker 容器跨主机通讯&quot;&gt;&lt;/a&gt;实现Docker 容器跨主机通讯&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 </summary>
      
    
    
    
    <category term="docker" scheme="https://marsperl.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://marsperl.github.io/tags/docker/"/>
    
    <category term="容器通信" scheme="https://marsperl.github.io/tags/%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>docker安装mysql</title>
    <link href="https://marsperl.github.io/yyg/25ae9841/"/>
    <id>https://marsperl.github.io/yyg/25ae9841/</id>
    <published>2024-03-08T14:13:53.162Z</published>
    <updated>2024-03-08T14:39:45.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h1><blockquote><p><code>docker pull mysql</code> #拉取mysql镜像(最新版)</p></blockquote><p>若安装特定版本如6.0，则命令如下：</p><p><code>docker pull mysql:6.0</code></p><p>运行mysql，并分配3306端口，该命令如下：(<strong>注：下面的是一条命令</strong>)</p><p>此命令中的<code>jiamian</code>为小编的liunx系统的用户名，用时需替换为自己的用户名</p><p><code>MYSQL_ROOT_PASSWORD</code>后填的是mysql的密码，可自行替换</p><p><code>--name</code>后填的mysql-1是运行的mysql容器的名称，也可自行替换</p><blockquote><p>docker run -d -p 3306:3306 –privileged&#x3D;true -v &#x2F;jiamian&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql</p><p>-v &#x2F;jiamian&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;jiamian&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d </p><p>-e MYSQL_ROOT_PASSWORD&#x3D;123456 –name mysql-1 mysql</p></blockquote><p>此命令也可解决在删除mysql容器后，而出现的数据库数据丢失的问题。若要找回数据，则只需重新运行命令即可。</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230410201124021.png" alt="image-20230410201124021"></p><p>运行<code>docker ps</code>命令，可查看到mysql正在运行</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230410201052873.png" alt="image-20230410201052873"></p><h2 id="解决mysql插入中文乱码的情况"><a href="#解决mysql插入中文乱码的情况" class="headerlink" title="解决mysql插入中文乱码的情况"></a>解决mysql插入中文乱码的情况</h2><p>然后输入命令<code>cd /jiamian/mysql/conf</code>。进入该目录后，输入命令<code>vim my.cnf</code>，新建my.cnf文件，</p><p>并输入以下代码</p><blockquote><p>[client]<br>default_character_set&#x3D;utf8<br>[mysqld]<br>collation_server &#x3D; utf8_general_ci<br>character_set_server &#x3D; utf8</p></blockquote><p>保存退出后，输入 <code>docker restart mysql-1</code>，重启mysql。</p><p>再输入<code>docker exec -it mysql-1 /bin/bash</code>进入mysql环境，此时汉字可正常显示</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230410202120798.png" alt="image-20230410202120798"></p><h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><p>新建主服务器容器实例3307，具体命令如下：(<strong>注：下面的是一条命令</strong>)</p><p><code>MYSQL_ROOT_PASSWORD</code>后填的是mysql的密码，可自行替换</p><p><code>--name</code>后填的mysql-master是运行的mysql容器的名称，也可自行替换</p><blockquote><p>docker run -d -p 3307:3306 –name mysql-master </p><p>-v &#x2F;mydata&#x2F;mysql-master&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql </p><p>-v &#x2F;mydata&#x2F;mysql-master&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql </p><p>-v &#x2F;mydata&#x2F;mysql-master&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d </p><p>-e MYSQL_ROOT_PASSWORD&#x3D;root mysql:latest</p></blockquote><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230424155951733.png" alt="image-20230424155951733"></p><p>进入&#x2F;mydata&#x2F;mysql–master&#x2F;conf目录下新建my.cnf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装mysql&quot;&gt;&lt;a href=&quot;#docker安装mysql&quot; class=&quot;headerlink&quot; title=&quot;docker安装mysql&quot;&gt;&lt;/a&gt;docker安装mysql&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;docker </summary>
      
    
    
    
    <category term="docker" scheme="https://marsperl.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://marsperl.github.io/tags/docker/"/>
    
    <category term="mysql" scheme="https://marsperl.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm集群部署</title>
    <link href="https://marsperl.github.io/yyg/71468332/"/>
    <id>https://marsperl.github.io/yyg/71468332/</id>
    <published>2024-03-08T14:13:53.151Z</published>
    <updated>2024-03-08T14:39:45.959Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Swarm集群部署"><a href="#Docker-Swarm集群部署" class="headerlink" title="Docker Swarm集群部署"></a><strong>Docker Swarm集群部署</strong></h2><p><strong>任务平台</strong></p><p>3台虚拟机，一台作为manager 节点，另两台作为work节点。</p><p><strong>部署指南</strong></p><p>[TOC]</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载并安装docker文件及依赖</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动docker并设置开机自启</span></span><br><span class="line">systemctl start docker  </span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看版本</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="配置防火墙开放端口"><a href="#配置防火墙开放端口" class="headerlink" title="配置防火墙开放端口"></a>配置防火墙开放端口</h3><p>TCP协议端口 2377 ：集群管理端口<br>TCP协议端口 7946 ：节点之间通讯端口（不开放则会负载均衡失效）<br>UDP协议端口 4789 ：overlay网络通讯端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重载防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看80端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有放行的端口</span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h3 id="在-manager-节点创建-Swarm-集群"><a href="#在-manager-节点创建-Swarm-集群" class="headerlink" title="在 manager 节点创建 Swarm 集群"></a>在 manager 节点创建 Swarm 集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr=本机ip:2377 --listen-addr=本机ip:2377</span><br></pre></td></tr></table></figure><blockquote><p>Swarm initialized: current node (608u180nsa654xbxdthdhl0f6) is now a manager.</p><p>To add a worker to this swarm, run the following command:</p><p>​    <code>docker swarm join --token SWMTKN-1-13dv43qm3tdux7243z3c0najcetizjpgly1urd4uchtcooxe87-4eh15dbayxttxipm34s5tod6t 172.20.1.51:2377</code></p><p>To add a manager to this swarm, run ‘docker swarm join-token manager’ and follow the instructions.</p></blockquote><p>将执行后产生的命令（如上标红的），分别加入到其他主机中，执行后产生如下结果。即为成功加入。</p><p>或者执行下面命令产生令牌，并且是定期轮换计划（推荐）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token  --rotate worker</span><br></pre></td></tr></table></figure><blockquote><p>This node joined a swarm as a worker.</p></blockquote><p>（扩展）加入管理节点的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token --rotate manager</span><br></pre></td></tr></table></figure><p>在manager节点上输入<code>docker node ls</code> 可查看所有节点。</p><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDg4MDcwMjQzMjkyOWZmMjc1YzdmNWMzMGYzM2U0N2RfcGVTQjBRSmgzeUxOMHRKUFlteWJBS0VHcTMwVEhabUxfVG9rZW46RmE3OGJlVmNtb3VFY1h4UmdNSmNRT3FvbnFmXzE2OTQ3OTI5NzM6MTY5NDc5NjU3M19WNA" alt="img"></p><h3 id="创建用于swarm服务的自定义的overlay网络"><a href="#创建用于swarm服务的自定义的overlay网络" class="headerlink" title="创建用于swarm服务的自定义的overlay网络"></a>创建用于swarm服务的自定义的overlay网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式一</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--attachable选项表示该网络是可附加的，即其他容器可以连接到该网络</span>  </span><br><span class="line">docker network create -d overlay --attachable my-overlay</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式二</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--subnet:子网 --gateway:网关</span></span><br><span class="line">docker network create --driver overlay --subnet 10.0.9.0/24 --gateway 10.0.9.99 my-overlay</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查看docker网络</span></span><br><span class="line"> docker network ls</span><br></pre></td></tr></table></figure><h3 id="测试跨主机容器通信"><a href="#测试跨主机容器通信" class="headerlink" title="测试跨主机容器通信"></a>测试跨主机容器通信</h3><ol><li>在三台主机上各部署一个容器，进行相互ping，结果如下图。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机一</span></span><br><span class="line">docker run -it --name master --net=my-overlay ubuntu:latest</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机二</span></span><br><span class="line">docker run -it --name node1 --net=my-overlay ubuntu:latest</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主机三</span></span><br><span class="line">docker run -it --name node2 --net=my-overlay ubuntu:latest</span><br></pre></td></tr></table></figure><ol start="2"><li>安装测试工具</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ping工具</span></span><br><span class="line">apt-get install inetutils-ping -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装ip查看工具</span></span><br><span class="line">apt-get install net-tools -y</span><br></pre></td></tr></table></figure><p><img src="https://yeesoftware.feishu.cn/space/api/box/stream/download/asynccode/?code=OWFjMjlmYmQ3OWVmZWU0OWYyYTNlMjY0ZTk4NTEzYmZfdlU1SUduZ2VSdW50U1ZtMThQaGJSTjNsQnU2M1VETldfVG9rZW46RDVnUmJNOTk4b2dPYUt4UnVhbWNCUVNYbjRjXzE2OTQ3OTI5NzM6MTY5NDc5NjU3M19WNA" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Docker-Swarm集群部署&quot;&gt;&lt;a href=&quot;#Docker-Swarm集群部署&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm集群部署&quot;&gt;&lt;/a&gt;&lt;strong&gt;Docker Swarm集群部署&lt;/strong&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="docker" scheme="https://marsperl.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://marsperl.github.io/tags/docker/"/>
    
    <category term="docker Swarm" scheme="https://marsperl.github.io/tags/docker-Swarm/"/>
    
  </entry>
  
  <entry>
    <title>docker 安装 redis</title>
    <link href="https://marsperl.github.io/yyg/6fffbcc4/"/>
    <id>https://marsperl.github.io/yyg/6fffbcc4/</id>
    <published>2024-03-08T14:13:53.151Z</published>
    <updated>2024-03-08T14:39:45.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-安装-redis"><a href="#docker-安装-redis" class="headerlink" title="docker 安装 redis"></a>docker 安装 redis</h1><p>首先输入命令<code>docker pull redis</code> ，将最新版redis安装到本地</p><p>输入以下命令,后台启动redis(注：<strong>该命令是一条命令</strong>)</p><p>其中<code>--name</code>后面的是redis容器的名称，可自行更改</p><blockquote><p>docker run -p 6379:6379 –name mars1 –privileged&#x3D;true</p><p> -v &#x2F;app&#x2F;redis&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf </p><p>-v &#x2F;app&#x2F;redis&#x2F;data:&#x2F;data </p><p>-d redis:latest redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</p></blockquote><p>此命令也可解决在删除redis容器后，而出现的数据丢失的问题。若要找回数据，则只需重新运行命令即可。</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230411164804210.png" alt="image-20230411164804210"></p><p>运行<code>docker ps</code>命令，可查看到redis正在运行</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230411163752381.png" alt="image-20230411163752381"></p><p>然后执行<code>docker exec -it mars1 /bin/bash</code>命令，redis成功运行</p><p><img src="C:\Users\123\AppData\Roaming\Typora\typora-user-images\image-20230411180817939.png" alt="image-20230411180817939"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-安装-redis&quot;&gt;&lt;a href=&quot;#docker-安装-redis&quot; class=&quot;headerlink&quot; title=&quot;docker 安装 redis&quot;&gt;&lt;/a&gt;docker 安装 redis&lt;/h1&gt;&lt;p&gt;首先输入命令&lt;code&gt;docker</summary>
      
    
    
    
    <category term="docker" scheme="https://marsperl.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://marsperl.github.io/tags/docker/"/>
    
    <category term="redis" scheme="https://marsperl.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
